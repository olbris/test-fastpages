{
  
    
        "post0": {
            "title": "A first test post",
            "content": "Example Post . Subheading 1 . Testing first post . Subheading 2 . More testing .",
            "url": "https://olbris.github.io/test-fastpages/markdown/2022/11/16/test-first-post.html",
            "relUrl": "/markdown/2022/11/16/test-first-post.html",
            "date": " • Nov 16, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "first test notebook",
            "content": "About . This notebook is a test of fastpages with a notebook. I copied the demo notebook and cut a lot of things out. . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . .",
            "url": "https://olbris.github.io/test-fastpages/jupyter/2022/11/16/first-test-notebook.html",
            "relUrl": "/jupyter/2022/11/16/first-test-notebook.html",
            "date": " • Nov 16, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "How to display ImgLib2 data in a notebook?",
            "content": "In this notebook, we will explore how to store, process and visualize data with ImgLib2 in a notebook. . First let&#39;s add the necessary dependencies. We will use ImageJ to load example images and to generate RenderedImage outputs that we can use to render in the notebook. Then, we will import ImgLib2 and the modules to share data between ImgLib2 and ImageJ and the imglib2-realtransform module that includes various transformations. . %mavenRepo scijava.public https://maven.scijava.org/content/groups/public %maven net.imglib2:imglib2:6.0.0 %maven jitk:jitk-tps:3.0.3 %maven net.imagej:ij:1.53t %maven net.imglib2:imglib2-ij:2.0.0-beta-46 %maven net.imglib2:imglib2-realtransform:3.1.2 . Let&#39;s open one of ImageJ&#39;s example images and show it in the notebook. This uses Spencer Park&#39;s image renderer: . import ij.*; var imp = IJ.openImage(&quot;https://mirror.imagej.net/ij/images/clown.jpg&quot;); imp.getBufferedImage(); . If we want to work with this image in ImgLib2, we need to provide it as an ImgLib2 interface: . import net.imglib2.*; import net.imglib2.img.imageplus.*; var imp = IJ.openImage(&quot;https://mirror.imagej.net/ij/images/clown.jpg&quot;); // for later use without the compiler losing its mind, we must provide type information // for the ImagePlus wrapper, so let&#39;s not use var here RandomAccessibleInterval&lt;?&gt; rai = ImagePlusImgs.from(imp); rai; . IntImagePlus [320x200] . There is no default renderer for ImgLib2 interfaces available to the notebook kernel, so we see a default String representation of the result (when rendering this cell the first time). So let&#39;s register some simple renderers that use ImgLib2&#39;s ImageJ bridge and Spencer Park&#39;s image renderer to render ImgLib2 data into the notebook. We add a version that renders the first 2D slice of a RandomAccessibleInterval and a second version that renders a default interval 512x512+0+0 of the 2D slice at position 0 in all other dimensions of an infinite RandomAccessible. . import io.github.spencerpark.jupyter.kernel.display.common.*; import io.github.spencerpark.jupyter.kernel.display.mime.*; import net.imglib2.img.display.imagej.*; import net.imglib2.view.*; getKernelInstance().getRenderer().createRegistration(RandomAccessibleInterval.class) .preferring(MIMEType.IMAGE_PNG) .supporting(MIMEType.IMAGE_JPEG, MIMEType.IMAGE_GIF) .register((rai, context) -&gt; Image.renderImage( ImageJFunctions.wrap(rai, rai.toString()).getBufferedImage(), context)); getKernelInstance().getRenderer().createRegistration(RandomAccessible.class) .preferring(MIMEType.IMAGE_PNG) .supporting(MIMEType.IMAGE_JPEG, MIMEType.IMAGE_GIF) .register((ra, context) -&gt; Image.renderImage( ImageJFunctions.wrap( Views.interval( ra, new FinalInterval( Arrays.copyOf( new long[]{512, 512}, ra.numDimensions()))), ra.toString()).getBufferedImage(), context)); . Now let&#39;s try the same again: . var imp = IJ.openImage(&quot;https://mirror.imagej.net/ij/images/clown.jpg&quot;); // for later use without the compiler losing its mind, we must provide type information // for the ImagePlus wrapper, so let&#39;s not use var here RandomAccessibleInterval&lt;?&gt; rai = ImagePlusImgs.from(imp); rai; . Ok, great! Let&#39;s try the &#39;infinite&#39; version: . var ra = Views.extendBorder(rai); ra; . Wonderful! We can of course still render a String representation or alternative encodings with the injected display methods of the kernel: . display(rai, &quot;text/plain&quot;); display(ra, &quot;text/plain&quot;); display(rai, &quot;image/jpeg&quot;); display(ra, &quot;image/gif&quot;); . IntImagePlus [320x200] . net.imglib2.view.ExtendedRandomAccessibleInterval@7b93c33 . net.imglib2.view.ExtendedRandomAccessibleInterval@7b93c33 . 83cb29e1-36d5-4c3d-957c-4f0cc021af97 . You may have noticed that the output of this cell ends with an obscure identifier. We see this, because we did not catch the output of the display method which provides an identifier for the output object that it generates. This identifier can be used to update the contents of this object. We can use this to render simple animations, e.g. to slice through a 3D volume. Let&#39;s try this with a 3D volume from the ImageJ example images: . var imp = IJ.openImage(&quot;https://mirror.imagej.net/ij/images/flybrain.zip&quot;); RandomAccessibleInterval&lt;?&gt; rai = ImagePlusImgs.from(imp); var refSlice = display(Views.hyperSlice(rai, 2, rai.dimension(2) / 2), &quot;image/jpeg&quot;); var refLabel = display(&quot;slice &quot; + rai.dimension(2) / 2); for (int z = 0; z &lt; rai.dimension(2); ++z) { var slice = Views.hyperSlice(rai, 2, z); updateDisplay(refSlice, slice, &quot;image/jpeg&quot;); updateDisplay(refLabel, &quot;slice &quot; + z); Thread.sleep(100); } // for static notebook export updateDisplay(refSlice, Views.hyperSlice(rai, 2, rai.dimension(2) / 2), &quot;image/jpeg&quot;); . slice 56 . Of course, you can only see the animation if you actually run the notebook cell. In a future iteration, we are planning to implement an animated GIF generator for offline animations, but not this time. Let&#39;s see what else we can do with these renderers. . First, let&#39;s apply some transformations to images. Already in the above border extension example as well as in the slicing animation, we have used ImgLib2&#39;s default behavior to apply transformations lazily, i.e. only when a &#39;pixel&#39; is actually queried (e.g. to render it into a RenderedImage raster), the transformations are applied. Transformations can be applied to both coordinates and values. Lets apply some transformations to values: . import net.imglib2.converter.*; import net.imglib2.type.numeric.*; var imp = IJ.openImage(&quot;https://mirror.imagej.net/ij/images/clown.jpg&quot;); RandomAccessibleInterval&lt;ARGBType&gt; rai = ImagePlusImgs.from(imp); display(Converters.argbChannel(rai, 1)); display(&quot;red&quot;); display(Converters.argbChannel(rai, 2)); display(&quot;green&quot;); display(Converters.argbChannel(rai, 3)); display(&quot;blue&quot;); display( Converters.&lt;ARGBType, ARGBType&gt;convert2( rai, (in, out) -&gt; { final int argb = in.get(); final double grey = 0.3 * ARGBType.red(argb) + 0.6 * ARGBType.green(argb) + 0.1 * ARGBType.blue(argb); out.set(ARGBType.rgba(255 - grey, grey, grey, 255)); }, ARGBType::new)); display(&quot;grey to red-cyan ramp&quot;); . red . green . blue . grey to red-cyan ramp . b677ba7f-39df-4995-9861-d1c75f28d437 . And now some integer coordinate transformations: . display(Views.invertAxis(rai, 0)); display(&quot;flip axis 0&quot;); display(Views.permute(rai, 0, 1)); display(&quot;permute axes&quot;); display(Views.extendMirrorSingle(rai)); display(&quot;mirror extension without repeated border pixels&quot;); display(Views.subsample(Views.shear(Views.extendPeriodic(rai), 0, 1), 3, 1)); display(&quot;extend periodically, shear axis 1 into axis 0, subsample by (3, 1)&quot;); . flip axis 0 . permute axes . mirror extension without repeated border pixels . extend periodically, shear axis 1 into axis 0, subsample by (3, 1) . 2e864958-c2a5-4cf2-91cf-c74e2788bbfc . While most trivial integer transformations such as flipping axes work on intervals, you probably noticed that we had to extend the image to infinity in order to shear it, so ImgLib2 can provide values for coordinates outside of the source interval. For real coordinate transformations we will also need to interpolate values at non-integer coordinates. Finally, in order to render the result, we have to read it from a raster. Let&#39;s do this: . import net.imglib2.interpolation.randomaccess.*; import net.imglib2.realtransform.*; var imp = IJ.openImage(&quot;https://mirror.imagej.net/ij/images/clown.jpg&quot;); RandomAccessibleInterval&lt;ARGBType&gt; rai = ImagePlusImgs.from(imp); var ra = Views.extendValue(rai, new ARGBType(0xff00ff00)); // &lt; green background var interpolated = Views.interpolate(ra, new ClampingNLinearInterpolatorFactory&lt;&gt;()); // n-linear interpolation /** * This would be * var interpolated = Views.interpolate(ra, new NLinearInterpolatorFactory&lt;&gt;()); * if you have no concern about value overflows */ var affine = new AffineTransform2D(); var transformed = Views.interval(RealViews.affine(interpolated, affine), rai); // shortcut for affines var refImage = display(transformed, &quot;image/jpeg&quot;); var refLabel = display(&quot;&quot;, &quot;text/html&quot;); final int steps = 20; for (int i = 0; i &lt; steps; ++i) { affine.translate(-rai.dimension(0) / 2, -rai.dimension(1) / 2); affine.rotate(Math.PI / 6.0 / steps); affine.scale(1.0 + 0.7 / steps); affine.translate(rai.dimension(0) / 2, rai.dimension(1) / 2); updateDisplay(refImage, Views.interval(transformed, rai), &quot;image/jpeg&quot;); updateDisplay( refLabel, String.format(&quot;&quot;&quot; &lt;p&gt;affine transformation matrix:&lt;/p&gt; &lt;table&gt; &lt;tr&gt;&lt;td&gt;%.2f&lt;/td&gt;&lt;td&gt;%.2f&lt;/td&gt;&lt;td&gt;%.2f&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;%.2f&lt;/td&gt;&lt;td&gt;%.2f&lt;/td&gt;&lt;td&gt;%.2f&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt;&quot;&quot;&quot;, affine.get(0, 0), affine.get(0, 1), affine.get(0, 2), affine.get(1, 0), affine.get(1, 1), affine.get(1, 2)), &quot;text/html&quot;); Thread.sleep(100); } . affine transformation matrix: . 1.72 | -0.99 | -16.22 | . 0.99 | 1.72 | -231.50 | . Affine transformation are probably the most well known and simple real coordinate transformations, but there are many more. Let&#39;s try a ThinplateSplineTransform and format text output with markdown: . var refImage = display(rai, &quot;image/jpeg&quot;); var refLabel = display(&quot;&quot;, &quot;text/markdown&quot;); int steps = 20; double stretch = 40; for (int i = 0; i &lt; steps; ++i) { final double offset = stretch * i / steps; final double[][] p = { {0, rai.dimension(0), 0, rai.dimension(0), rai.dimension(0) * 0.25, rai.dimension(0) * 0.75, rai.dimension(0) * 0.25, rai.dimension(0) * 0.75}, {0, 0, rai.dimension(1), rai.dimension(1), rai.dimension(1) * 0.25, rai.dimension(1) * 0.25, rai.dimension(1) * 0.75, rai.dimension(1) * 0.75} }; final double[][] q = { {0, rai.dimension(0), 0, rai.dimension(0), rai.dimension(0) * 0.25 + offset , rai.dimension(0) * 0.75 - offset, rai.dimension(0) * 0.25 + offset, rai.dimension(0) * 0.75 - offset}, {0, 0, rai.dimension(1), rai.dimension(1), rai.dimension(1) * 0.25 + offset, rai.dimension(1) * 0.25 + offset, rai.dimension(1) * 0.75 - offset, rai.dimension(1) * 0.75 - offset} }; final var transform = new ThinplateSplineTransform(p, q); final var warped = new RealTransformRandomAccessible&lt;&gt;(interpolated, transform); String text = &quot;&quot;&quot; thinplate spline transformation controls points: | | p&lt;sub&gt;x&lt;/sub&gt; | p&lt;sub&gt;y&lt;/sub&gt; | q&lt;sub&gt;x&lt;/sub&gt; | q&lt;sub&gt;y&lt;/sub&gt; | | | : | : | : | : | &quot;&quot;&quot;; for (int j = 0; j &lt; p[0].length; ++j) text += String.format(&quot;&quot;&quot; | %d | %.2f | %.2f | %.2f | %.2f | &quot;&quot;&quot;, j, p[0][j], p[1][j], q[0][j], q[1][j]); updateDisplay(refImage, Views.interval(warped, rai), &quot;image/jpeg&quot;); updateDisplay(refLabel, text, &quot;text/markdown&quot;); Thread.sleep(100); } . thinplate spline transformation controls points: . px py qx qy . 0 | 0.00 | 0.00 | 0.00 | 0.00 | . 1 | 320.00 | 0.00 | 320.00 | 0.00 | . 2 | 0.00 | 200.00 | 0.00 | 200.00 | . 3 | 320.00 | 200.00 | 320.00 | 200.00 | . 4 | 80.00 | 50.00 | 116.00 | 86.00 | . 5 | 240.00 | 50.00 | 204.00 | 86.00 | . 6 | 80.00 | 150.00 | 116.00 | 114.00 | . 7 | 240.00 | 150.00 | 204.00 | 114.00 | .",
            "url": "https://olbris.github.io/test-fastpages/imglib2/jupyter/notebook/2022/09/14/how-to-display-imglib2-data.html",
            "relUrl": "/imglib2/jupyter/notebook/2022/09/14/how-to-display-imglib2-data.html",
            "date": " • Sep 14, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://olbris.github.io/test-fastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://olbris.github.io/test-fastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://olbris.github.io/test-fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://olbris.github.io/test-fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}